/*! @page devdoc-schema Schema operations

A schema defines the format of the application data in WiredTiger. WiredTiger
supports various types of schemas (See @ref schema for more
information), operated upon through a WT_SESSION reference. This section details
the internals of these various schema operations.

Schema operations cause an update to the metadata and are performed under a
schema lock to avoid concurrent operations on the same object. Following
sequence of steps define a generic schema operation:

@plantuml_start{schema_generic.png}
@startuml{schema_generic.png}
:WT_SESSION->generic_schema_op;
partition with-schema-lock {
    :perform operation on underlying data-object;
    :update metadata-file;
    :checkpoint and sync metadata;
}
stop
@enduml
@plantuml_end

@section schema_create Schema Create

The create schema operation is responsible for creating the underlying data
object on the filesystem with the right parameters and then creating an entry
for this new object into the metadata. The sequence of operations for various
schema types are as follows:

@plantuml_start{schema_create.png}
@startuml{schema_create.png}
:WT_SESSION->create
(__session_create());

partition session-API-call {
    :API session init with NULL dhandle;
    :exit if PANIC flag set;
    :exit if invalid configuration;
}

:validate "type" config parameter;

partition with-schema-lock {
    partition with-table-lock {
        :turn on meta tracking;
        :check uri}

        split
            :uri matches "colgroup:";
            :__create_colgroup();
        split again
            :uri matches "file:";
            partition __create_file() {
                :exit if file exists;
                :validate allocation size;
                :block manager creates the file:
                 1.create file using __wt_open()
                 2.write an initial descriptor to file
                 3.fsync and close the file handle;
                if (metadata-file?) then (yes)
                else (no)
                    :update metadata with file
                     configuration and version;
                endif
                :check if file setup correctly by
                 getting btree handle with
                 WT_DHANDLE_EXCLUSIVE set;
                if (metatracking on?) then (yes)
                    :track locked handle*;
                else (no)
                    :release btree -
                     sync and close;
                endif
            }
        split again
            :uri matches "lsm:";
            :__wt_lsm_tree_create();
        split again
            :uri matches "index:";
            :__create_index();
        split again
            :matches a named data-source;
            :__create_data_source();
        end split

        partition turn-off-meta-tracking {
            if (errors?) then (yes)
                :unroll operations;
            else (no)
                if (logging?) then (yes)
                    :sync log;
                else (no)
                endif
                :checkpoint and sync;
            endif
            :apply post-commit ops:
             release tracked (handle) btree* -
             sync and close;
            note right
                if meta tracking is on, this btree
                was being tracked as locked. As part
                of tuning off meta tracking, we sync
                and close this btree
            end note
        }
    }
}

:API-end;

stop
@enduml
@plantuml_end

*/
